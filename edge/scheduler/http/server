package http

import (
	"log"
	"net/http"
	"star-edge-cloud/edge/scheduler/bussiness"
	"time"

	"github.com/gorilla/mux"
)

// SchedulerServer - 调度服务
type SchedulerServer struct {
	Manager    *bussiness.SchedulerManager
	ServerAddr string
}

// Start - 启动服务
func (ls *SchedulerServer) Start() error {
	mux := ls.makeMuxRouter()
	log.Println("服务启动，开始监听端口", ls.ServerAddr)
	s := &http.Server{
		Addr:           ls.ServerAddr,
		Handler:        mux,
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}

	if err := s.ListenAndServe(); err != nil {
		return err
	}

	return nil
}

// create handlers
func (ls *SchedulerServer) makeMuxRouter() http.Handler {
	muxRouter := mux.NewRouter()
	muxRouter.HandleFunc("/api/scheduler/addtask", ls.handleAddTask).Methods("POST")
	muxRouter.HandleFunc("/api/scheduler/stoptask", ls.handleStopTask).Methods("POST")
	muxRouter.HandleFunc("/api/scheduler/removetask", ls.handleRemoveTask).Methods("POST")
	// muxRouter.HandleFunc("/api/log/load", ls.handleLoadLog).Methods("POST")
	return muxRouter
}

func (ls *SchedulerServer) handleAddTask(w http.ResponseWriter, r *http.Request) {
	// body, _ := ioutil.ReadAll(r.Body)
	// defer r.Body.Close()

	// var info models.LogInfo
	// err := json.Unmarshal(body, &info)
	// if err != nil {
	// 	// log.Println(err.Error())
	// 	io.WriteString(w, err.Error())
	// 	return
	// }
	// ls.Logger.Write(&info)
	// io.WriteString(w, "success")
}

func (ls *SchedulerServer) handleRemoveTask(w http.ResponseWriter, r *http.Request) {
	// err := r.ParseForm()
	// if err != nil {
	// 	io.WriteString(w, err.Error())
	// 	return
	// }
	// id := r.Form.Get("id")
	// if err := ls.Logger.Delete(id); err != nil {
	// 	io.WriteString(w, "success")
	// } else {
	// 	io.WriteString(w, err.Error())
	// }
}

func (ls *SchedulerServer) handleStopTask(w http.ResponseWriter, r *http.Request) {
	// err := r.ParseForm()
	// if err != nil {
	// 	io.WriteString(w, err.Error())
	// 	return
	// }
	// id := r.Form.Get("id")
	// if err := ls.Logger.Delete(id); err != nil {
	// 	io.WriteString(w, "success")
	// } else {
	// 	io.WriteString(w, err.Error())
	// }
}
